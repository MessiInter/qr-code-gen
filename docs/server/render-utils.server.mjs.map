{
  "version": 3,
  "sources": ["angular:server-render-utils:angular:server-render-utils"],
  "sourcesContent": ["export { \u0275Console } from '@angular/core';\nexport { renderApplication, renderModule, \u0275SERVER_CONTEXT } from '@angular/platform-server';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ApplicationRef, Compiler, createPlatformFactory, platformCore, \u0275whenStable as whenStable, \u0275Console, } from '@angular/core';\nimport { INITIAL_CONFIG, \u0275INTERNAL_SERVER_PLATFORM_PROVIDERS as INTERNAL_SERVER_PLATFORM_PROVIDERS, } from '@angular/platform-server';\nimport { Router, \u0275loadChildren as loadChildrenHelper } from '@angular/router';\nasync function* getRoutesFromRouterConfig(routes, compiler, parentInjector, parentRoute = '') {\n    for (const route of routes) {\n        const { path, redirectTo, loadChildren, children } = route;\n        if (path === undefined) {\n            continue;\n        }\n        const currentRoutePath = buildRoutePath(parentRoute, path);\n        if (redirectTo !== undefined) {\n            // TODO: handle `redirectTo`.\n            yield { route: currentRoutePath, success: false, redirect: true };\n            continue;\n        }\n        if (/[:*]/.test(path)) {\n            // TODO: handle parameterized routes population.\n            yield { route: currentRoutePath, success: false, redirect: false };\n            continue;\n        }\n        yield { route: currentRoutePath, success: true, redirect: false };\n        if (children?.length) {\n            yield* getRoutesFromRouterConfig(children, compiler, parentInjector, currentRoutePath);\n        }\n        if (loadChildren) {\n            const loadedChildRoutes = await loadChildrenHelper(route, compiler, parentInjector).toPromise();\n            if (loadedChildRoutes) {\n                const { routes: childRoutes, injector = parentInjector } = loadedChildRoutes;\n                yield* getRoutesFromRouterConfig(childRoutes, compiler, injector, currentRoutePath);\n            }\n        }\n    }\n}\nexport async function* extractRoutes(bootstrapAppFnOrModule, document) {\n    const platformRef = createPlatformFactory(platformCore, 'server', [\n        {\n            provide: INITIAL_CONFIG,\n            useValue: { document, url: '' },\n        },\n        {\n            provide: \u0275Console,\n            /** An Angular Console Provider that does not print a set of predefined logs. */\n            useFactory: () => {\n                class Console extends \u0275Console {\n                    ignoredLogs = new Set(['Angular is running in development mode.']);\n                    log(message) {\n                        if (!this.ignoredLogs.has(message)) {\n                            super.log(message);\n                        }\n                    }\n                }\n                return new Console();\n            },\n        },\n        ...INTERNAL_SERVER_PLATFORM_PROVIDERS,\n    ])();\n    try {\n        let applicationRef;\n        if (isBootstrapFn(bootstrapAppFnOrModule)) {\n            applicationRef = await bootstrapAppFnOrModule();\n        }\n        else {\n            const moduleRef = await platformRef.bootstrapModule(bootstrapAppFnOrModule);\n            applicationRef = moduleRef.injector.get(ApplicationRef);\n        }\n        // Wait until the application is stable.\n        await whenStable(applicationRef);\n        const injector = applicationRef.injector;\n        const router = injector.get(Router);\n        if (router.config.length === 0) {\n            // In case there are no routes available\n            yield { route: '', success: true, redirect: false };\n        }\n        else {\n            const compiler = injector.get(Compiler);\n            // Extract all the routes from the config.\n            yield* getRoutesFromRouterConfig(router.config, compiler, injector);\n        }\n    }\n    finally {\n        platformRef.destroy();\n    }\n}\nfunction isBootstrapFn(value) {\n    // We can differentiate between a module and a bootstrap function by reading compiler-generated `\u0275mod` static property:\n    return typeof value === 'function' && !('\u0275mod' in value);\n}\nfunction buildRoutePath(...routeParts) {\n    return routeParts.filter(Boolean).join('/');\n}\n"],
  "mappings": ";iMAYA,SAAgBA,EAA0BC,EAAQC,EAAUC,EAAgBC,EAAc,GAAI,QAAAC,EAAA,sBAC1F,QAAWC,KAASL,EAAQ,CACxB,GAAM,CAAE,KAAAM,EAAM,WAAAC,EAAY,aAAAC,EAAc,SAAAC,CAAS,EAAIJ,EACrD,GAAIC,IAAS,OACT,SAEJ,IAAMI,EAAmBC,EAAeR,EAAaG,CAAI,EACzD,GAAIC,IAAe,OAAW,CAE1B,KAAM,CAAE,MAAOG,EAAkB,QAAS,GAAO,SAAU,EAAK,EAChE,QACJ,CACA,GAAI,OAAO,KAAKJ,CAAI,EAAG,CAEnB,KAAM,CAAE,MAAOI,EAAkB,QAAS,GAAO,SAAU,EAAM,EACjE,QACJ,CAKA,GAJA,KAAM,CAAE,MAAOA,EAAkB,QAAS,GAAM,SAAU,EAAM,EAC5DD,GAAU,SACV,MAAAG,EAAOb,EAA0BU,EAAUR,EAAUC,EAAgBQ,CAAgB,IAErFF,EAAc,CACd,IAAMK,EAAoB,UAAAC,EAAMN,EAAmBH,EAAOJ,EAAUC,CAAc,EAAE,UAAU,GAC9F,GAAIW,EAAmB,CACnB,GAAM,CAAE,OAAQE,EAAa,SAAAC,EAAWd,CAAe,EAAIW,EAC3D,MAAAD,EAAOb,EAA0BgB,EAAad,EAAUe,EAAUN,CAAgB,EACtF,CACJ,CACJ,CACJ,GACA,SAAuBO,EAAcC,EAAwBC,EAAU,QAAAf,EAAA,sBACnE,IAAMgB,EAAcC,EAAsBC,EAAc,SAAU,CAC9D,CACI,QAASC,EACT,SAAU,CAAE,SAAAJ,EAAU,IAAK,EAAG,CAClC,EACA,CACI,QAASK,EAET,WAAY,IAAM,CACd,MAAMA,UAAgBA,CAAS,CAC3B,YAAc,IAAI,IAAI,CAAC,yCAAyC,CAAC,EACjE,IAAIC,EAAS,CACJ,KAAK,YAAY,IAAIA,CAAO,GAC7B,MAAM,IAAIA,CAAO,CAEzB,CACJ,CACA,OAAO,IAAID,CACf,CACJ,EACA,GAAGE,CACP,CAAC,EAAE,EACH,GAAI,CACA,IAAIC,EACAC,EAAcV,CAAsB,EACpCS,EAAiB,UAAAb,EAAMI,EAAuB,GAI9CS,GADkB,UAAAb,EAAMM,EAAY,gBAAgBF,CAAsB,IAC/C,SAAS,IAAIW,CAAc,EAG1D,UAAAf,EAAMgB,EAAWH,CAAc,GAC/B,IAAMX,EAAWW,EAAe,SAC1BI,EAASf,EAAS,IAAIgB,CAAM,EAClC,GAAID,EAAO,OAAO,SAAW,EAEzB,KAAM,CAAE,MAAO,GAAI,QAAS,GAAM,SAAU,EAAM,MAEjD,CACD,IAAM9B,EAAWe,EAAS,IAAIiB,CAAQ,EAEtC,MAAArB,EAAOb,EAA0BgC,EAAO,OAAQ9B,EAAUe,CAAQ,EACtE,CACJ,QACA,CACII,EAAY,QAAQ,CACxB,CACJ,GACA,SAASQ,EAAcM,EAAO,CAE1B,OAAO,OAAOA,GAAU,YAAc,EAAE,cAAUA,EACtD,CACA,SAASvB,KAAkBwB,EAAY,CACnC,OAAOA,EAAW,OAAO,OAAO,EAAE,KAAK,GAAG,CAC9C",
  "names": ["getRoutesFromRouterConfig", "routes", "compiler", "parentInjector", "parentRoute", "__asyncGenerator", "route", "path", "redirectTo", "loadChildren", "children", "currentRoutePath", "buildRoutePath", "__yieldStar", "loadedChildRoutes", "__await", "childRoutes", "injector", "extractRoutes", "bootstrapAppFnOrModule", "document", "platformRef", "createPlatformFactory", "platformCore", "INITIAL_CONFIG", "Console", "message", "INTERNAL_SERVER_PLATFORM_PROVIDERS", "applicationRef", "isBootstrapFn", "ApplicationRef", "whenStable", "router", "Router", "Compiler", "value", "routeParts"]
}
